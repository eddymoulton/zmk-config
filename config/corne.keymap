/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define _DEFAULT 0
#define _BACKUP 1
#define _MAC 2
#define _FANCY_GAME 3
#define _GAME_NUM 4
#define _LOWER 5
#define _LOWER_MAC 6
#define _NUM 7
#define _SYS 8
#define none_layer 15

/ {
    combos {
        compatible = "zmk,combos";

        cmb_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            require-prior-idle-ms = <100>;
        };

        cmb_tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            layers = <0 2 5 6 7 9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            layers = <0 2 1 3 4 7 9>;
            require-prior-idle-ms = <100>;
        };

        cmb_delete {
            bindings = <&kp DELETE>;
            key-positions = <20 19>;
            layers = <5 6 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <4 5>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_lpar {
            bindings = <&kp LPAR>;
            key-positions = <15 16>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_rpar {
            bindings = <&kp RPAR>;
            key-positions = <16 17>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <27 28>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <28 29>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_lt {
            bindings = <&kp LT>;
            key-positions = <30 31>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_gt {
            bindings = <&kp GT>;
            key-positions = <31 32>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <7 8>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_equals {
            bindings = <&kp EQUAL>;
            key-positions = <9 8>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_dash {
            bindings = <&kp MINUS>;
            key-positions = <9 22>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_linestart {
            bindings = <&kp LG(LEFT)>;
            key-positions = <19 18>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };

        cmb_lineend {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <22 21>;
            layers = <9 11>;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        _DEFAULT {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E     &kp R  &kp T    &kp Y     &kp U      &kp I      &kp O    &kp P     &kp BSLH
&kp LSHFT   &kp A  &kp S  &kp D     &kp F  &kp G    &kp H     &kp J      &kp K      &kp L    &kp SEMI  &lt 7 SQT
&kp LCTRL   &kp Z  &kp X  &kp C     &kp V  &kp B    &kp N     &kp M      &kp COMMA  &kp DOT  &kp FSLH  &lt 13 ESC
                          &kp LALT  &mo 5  &mo 7    &kp LGUI  &kp SPACE  &none
            >;
        };

        _BACKUP {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T    &kp Y          &kp U      &kp I      &kp O    &kp P     &kp BSLH
&kp LSHFT  &kp A  &kp S  &kp D     &kp F  &kp G    &kp H          &kp J      &kp K      &kp L    &kp SEMI  &lt 7 SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V  &kp B    &kp N          &kp M      &kp COMMA  &kp DOT  &kp FSLH  &lt 13 ESC
                         &kp LALT  &mo 5  &mo 7    &mt LGUI BSPC  &kp SPACE  &kp RET
            >;
        };

        _MAC {
            bindings = <
&kp ESCAPE    &kp Q  &kp W  &kp E         &kp R  &kp T    &kp Y                 &kp U      &kp I             &kp O    &kp P     &kp BSLH
&kp LSHFT     &kp A  &kp S  &kp D         &kp F  &kp G    &kp H                 &kp J      &kp K             &kp L    &kp SEMI  &lt 7 SQT
&kp LEFT_ALT  &kp Z  &kp X  &kp C         &kp V  &kp B    &kp N                 &kp M      &kp COMMA         &kp DOT  &kp FSLH  &lt 13 F20
                            &kp LEFT_GUI  &mo 6  &mo 7    &kp LC(LA(LEFT_GUI))  &kp SPACE  &kp LEFT_CONTROL
            >;
        };

        _FANCY_GAME {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T    &kp Y          &kp U      &kp I      &kp O    &kp P     &kp BSLH
&kp LSHFT  &kp A  &kp S  &kp D     &kp F      &kp G    &kp H          &kp J      &kp K      &kp L    &kp SEMI  &lt 7 SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V      &kp B    &kp N          &kp M      &kp COMMA  &kp DOT  &kp FSLH  &lt 13 ESC
                         &kp LALT  &kp SPACE  &mo 4    &mt LGUI BSPC  &kp SPACE  &kp RET
            >;
        };

        _GAME_NUM {
            bindings = <
&kp ESC  &kp N1  &kp N4  &kp N7  &kp N0   &kp C_PREV    &kp C_VOL_UP  &none  &none  &none  &none  &none
&trans   &kp N2  &kp N5  &kp N8  &kp DEL  &kp C_PP      &kp C_MUTE    &none  &none  &none  &none  &none
&trans   &kp N3  &kp N6  &kp N9  &kp ESC  &kp C_NEXT    &kp C_VOL_DN  &none  &none  &none  &none  &none
                         &trans  &none    &none         &none         &none  &none
            >;
        };

        _LOWER {
            bindings = <
&kp ESC  &kp SPACE  &kp RET    &kp BSPC    &kp DEL    &kp C_VOL_UP    &kp GRAVE  &kp EQUAL  &kp UP    &kp MINUS  &kp LC(P)  &none
&trans   &kp LC(A)  &kp LC(S)  &kp ESCAPE  &kp LC(F)  &kp C_MUTE      &kp HOME   &kp LEFT   &kp DOWN  &kp RIGHT  &kp END    &kp PG_UP
&trans   &kp LC(Z)  &kp LC(X)  &kp LC(C)   &kp LC(V)  &kp C_VOL_DN    &none      &kp LBKT   &kp RBKT  &kp LPAR   &kp RPAR   &kp PG_DN
                               &trans      &none      &none           &trans     &kp SPACE  &trans
            >;
        };

        _LOWER_MAC {
            bindings = <
&kp ESC  &kp SPACE  &kp RET    &kp BSPC    &kp DEL    &kp C_VOL_UP    &kp GRAVE     &kp EQUAL  &kp UP    &kp MINUS  &kp LG(P)      &none
&trans   &kp LG(A)  &kp LG(S)  &kp ESCAPE  &kp LG(F)  &kp C_MUTE      &kp LG(LEFT)  &kp LEFT   &kp DOWN  &kp RIGHT  &kp LG(RIGHT)  &kp PG_UP
&trans   &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)  &kp C_VOL_DN    &none         &kp LBKT   &kp RBKT  &kp LPAR   &kp RPAR       &kp PG_DN
                               &trans      &none      &none           &trans        &kp SPACE  &trans
            >;
        };

        _NUM {
            bindings = <
&trans  &kp F1  &kp F4  &kp F7  &kp F10  &kp C_PREV    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp STAR  &none
&trans  &kp F2  &kp F5  &kp F8  &kp F11  &kp C_PP      &kp MINUS  &kp N4  &kp N5  &kp N6  &kp DOT   &none
&trans  &kp F3  &kp F6  &kp F9  &kp F12  &kp C_NEXT    &none      &kp N1  &kp N2  &kp N3  &kp FSLH  &none
                        &trans  &none    &none         &trans     &kp N0  &trans
            >;
        };

        none_layer {
            bindings = <
&trans  &none  &none  &none   &none  &none    &none  &none  &none  &none  &none  &none
&trans  &none  &none  &none   &none  &none    &none  &none  &none  &none  &none  &none
&trans  &none  &none  &none   &none  &none    &none  &none  &none  &none  &none  &none
                      &trans  &none  &none    &none  &none  &none
            >;
        };

        altbase {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E         &kp R   &kp T     &kp Y                 &kp U      &kp I         &kp O    &kp P     &kp BSLH
&kp LSHFT   &kp A  &kp S  &kp D         &kp F   &kp G     &kp H                 &kp J      &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL   &kp Z  &kp X  &kp C         &kp V   &kp B     &kp N                 &kp M      &kp COMMA     &kp DOT  &kp FSLH  &lt 13 F20
                          &kp LEFT_GUI  &mo 11  &mo 12    &kp LC(LA(LEFT_GUI))  &kp SPACE  &kp LEFT_ALT
            >;
        };

        altbase-num {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E         &kp R   &kp T     &kp Y           &kp U      &kp I         &kp O    &kp P     &kp BSLH
&kp LSHFT   &kp A  &kp S  &kp D         &kp F   &kp G     &kp H           &kp J      &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL   &kp Z  &kp X  &kp C         &kp V   &kp B     &kp N           &kp M      &kp COMMA     &kp DOT  &kp FSLH  &lt 13 F20
                          &kp LEFT_GUI  &mo 11  &mo 12    &kp KP_NUMLOCK  &kp SPACE  &kp LEFT_ALT
            >;
        };

        altlower {
            bindings = <
&none   &kp SPACE  &kp RET  &kp BSPC    &kp DEL  &kp C_VOL_UP    &none     &none      &none   &none      &none  &none
&trans  &none      &none    &kp ESCAPE  &none    &kp C_MUTE      &kp LEFT  &kp DOWN   &kp UP  &kp RIGHT  &none  &kp PG_UP
&trans  &none      &none    &none       &none    &kp C_VOL_DN    &none     &none      &none   &none      &none  &kp PG_DN
                            &trans      &none    &none           &trans    &kp SPACE  &trans
            >;
        };

        altnum {
            bindings = <
&trans  &kp F1  &kp F4  &kp F7  &kp F10  &kp C_PREV    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp STAR  &none
&trans  &kp F2  &kp F5  &kp F8  &kp F11  &kp C_PP      &kp MINUS  &kp N4  &kp N5  &kp N6  &kp DOT   &none
&trans  &kp F3  &kp F6  &kp F9  &kp F12  &kp C_NEXT    &none      &kp N1  &kp N2  &kp N3  &kp FSLH  &none
                        &trans  &none    &none         &trans     &kp N0  &trans
            >;
        };

        _SYS {
            bindings = <
&trans  &bt BT_PRV    &bt BT_NXT    &none         &none         &bt BT_CLR      &to 0  &to 1   &none  &none  &none  &kp CAPSLOCK
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &to 3  &to 9   &none  &none  &none  &none
&trans  &out OUT_USB  &out OUT_BLE  &none         &none         &none           &to 2  &to 10  &none  &none  &none  &none
                                    &trans        &none         &none           &none  &none   &none
            >;
        };
    };
};
